#library "WEAPON"
#include "zcommon.acs"
#import "ALPHLIB.acs"

/*
Script "WeaponGlow" (int predicting, int pressed, int released, int buttons)
{
	str glowclass = "BlueGlowSpawner";
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		if(StrIcmp(GetWeapon(), WEAP_CLASSNAMES[i]) == 0 || StrIcmp(GetWeapon(), WEAP_ALTCLASSNAMES[i]) == 0)
		{
			glowclass = StrParam(s:WEAP_COLORS[i], s:"GlowSpawner");
			SetNetworkReplicationFlags(NETREP_SKIPOWNER);
			SpawnSpotForced(glowclass, ActivatorTID(), 0, 0);
            SetNetworkReplicationFlags(0);
		}
	}
}
Script "WeaponGlowSetup" (void)
{
	SetActionScript(0, 0, "WeaponGlow");
}
Script "WeaponGlowSetupClient" (void) CLIENTSIDE
{
	SetActionScript(0, 0, "WeaponGlow");
}*/
Script "BeamOrbDebuffFX" ENTER
{
	while(true)
	{
		if(CheckInventory("BeamOrbDebuff") > 0)
		{
			SpawnForced("BeamOrbDebuffFX2", GetActorX(0), GetActorY(0), GetActorZ(0) + 24.0, 0, 0);
		}
		delay(12);
	}
}
//For the Thermite Spitter's alt-fire.
Script "PlayerDeathByThermite" (void)
{
	int initid = ActivatorTID();
	SetActivator(0, AAPTR_TARGET);
	int blastid = UniqueTID(1, 0);
	SpawnProjectile(0, "ThermiteChainReact", 0, 0, 0, 0, blastid);
	SetActorPosition(blastid, GetActorX(initid), GetActorY(initid), GetActorZ(initid) + 16.0, false);
}
//Every weapon should execute this script when fired.
Script "OnWeaponFired" (void) 
{
	GiveInventory("EnergyRechargeCD", 105);
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		if(StrIcmp(GetWeapon(), WEAP_CLASSNAMES[i]) == 0 && CheckInventory(WEAP_ENERGYNAMES[i]) <= 20 && CheckInventory("NoLowEnergySound") == 0)
		{
			LocalAmbientSound("General/LowEnergy", 96);
			GiveInventory("NoLowEnergySound", 1);
		}
	}
	//ACS_NamedExecuteAlways("CheckAssassinTactics", 0);
	
}
//Handles Alt-Fire cooldowns.
Script "OnWeaponAltFired" (void) 
{
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		if(StrIcmp(GetWeapon(), WEAP_CLASSNAMES[i]) == 0 || StrIcmp(GetWeapon(), WEAP_ALTCLASSNAMES[i]) == 0)
		{
			GiveInventory(WEAP_COOLDOWNNAMES[i], GetAmmoCapacity(WEAP_COOLDOWNNAMES[i]));
		}
	}
	GiveInventory("AltFireDeviceCD", GetAmmoCapacity("AltFireDeviceCD"));
	ACS_NamedExecuteAlways("OnWeaponFired", 0);
	
}

Script "CheckAltFirePressed" (void)
{
	//Sets the activator to the shooter of the pellet, instead of the pellet itself.
	SetActivator(0, AAPTR_TARGET);
	if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK)
	{
		SetResultValue(1);
	}
	else
	{
		SetResultValue(0);
	}
}
//For use with Particle Splitter Alt-Fire (for unlagging the detonation)
Script "CheckAltFireReleased" (void)
{
	//Sets the activator to the shooter of the pellet, instead of the pellet itself.
	SetActivator(0, AAPTR_TARGET);
	if((GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ALTATTACK) && !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK))
	{
		SetResultValue(1);
	}
	else
	{
		SetResultValue(0);
	}
}
Script "ZoomSetup" (void)
{
	SetActionScript(0, BT_ZOOM, "WeaponZoomControl");
}
Script "ZoomSetupClient" (void) CLIENTSIDE
{
	SetActionScript(0, BT_ZOOM, "WeaponZoomControl");
}
Script "WeaponZoomControl" (int predicting, int justPressed, int justReleased, int buttons)
{
	if (!predicting)
	{
		if (justPressed)
		{
			SetNetworkReplicationFlags( NETREP_SKIPOWNER );
			SetPlayerWeaponZoomFactor(PlayerNumber(), GetCVAR("alph_zoomamount"));
			SetNetworkReplicationFlags( 0 );
		}
		else if (justReleased)
		{
			SetNetworkReplicationFlags( NETREP_SKIPOWNER );
			SetPlayerWeaponZoomFactor(PlayerNumber(), 1.0);
			SetNetworkReplicationFlags( 0 );
		}
	}
}

//A hud script that is called when the user tries to Alt-Fire while it's on cooldown.
Script "AltFireFail" (void) 
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		if(!(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_ALTATTACK))
		{
			//displayHUDText("Alt-Fire on cooldown.", 0.6, 3.5, 1301);
			LocalAmbientSound("General/Fail",96);
			GiveInventory("AltFireFailCD", GetAmmoCapacity("AltFireFailCD"));
		}
	}
}