#library "player"
#include "zcommon.acs"
#import "ALPHLIB.acs"
#import "ACTIONS.acs"
#import "TRAVEL.acs"
#import "HUD.acs"
#import "PASSIVES.acs"

int targetdummyid = 900;
int playeridbase = 1000;
function void setPassive(int p)
{
	switch(p)
	{	
		case 0:
		GiveInventory("PassiveRapidAlt", 1);
		break;
		case 1:
		GiveInventory("PassiveSpeedDemon", 1);
		break;
		case 2:
		GiveInventory("PassiveAdrenalineRush", 1);
		break;
		case 3:
		GiveInventory("PassiveBandolier", 1);
		break;
		case 4:
		GiveInventory("PassiveOverclocked", 1);
		break;
		default: //0
		GiveInventory("PassiveAdrenalineRush", 1);
		break;
	}
	if(CheckInventory("PassiveSpeedDemon") > 0)
	{
		GiveInventory("ExtraTravelCharge", 1);
	}
	/*if(CheckInventory("PassiveNegaBarrier") > 0)
	{
		GiveInventory("NegaBarrier", 1);
		ACS_NamedExecuteAlways("NegaBarrierBubbleFX", 0);
	}*/
}
function void setAction(int a)
{
	switch(a)
	{
		case 0:
		GiveInventory("ActionRegenZone", 1);
		break;
		case 1:
		GiveInventory("ActionAutoDrone", 1);
		break;
		case 2:
		GiveInventory("ActionPowerBrace", 1);
		break;
		case 3:
		GiveInventory("ActionDecoyHologram", 1);
		break;
		case 4:
		GiveInventory("ActionRicochetDisc", 1);
		break;
		case 5:
		GiveInventory("ActionSonicShockwave", 1);
		break;
		default:
		GiveInventory("ActionRegenZone", 1);
		break;
	}
}
function void setStartWeapon(str sw)
{
	GiveInventory(sw, 1);
	if(	!CheckInventory("PhotonCarbine") &&
		!CheckInventory("ParticleSplitter") &&
		!CheckInventory("TeslaSMG") &&
		!CheckInventory("C14") &&
		!CheckInventory("SparkCannon") &&
		!CheckInventory("Flamespitter") && 
		!CheckInventory("BeamRifle"))
		{
			GiveInventory("PhotonCarbine", 1);
		}
		
	for(int j = 0; j < NUM_WEAPS; j++)
	{
		GiveInventory(WEAP_ENERGYNAMES[j], GetAmmoCapacity(WEAP_ENERGYNAMES[j]));
	}
}
function void gamemodeCheck(void)
{
	if(StrICmp(GetCurrentGameMode(), "Last Man Standing") == 0 || StrICmp(GetCurrentGameMode(), "Team Last Man Standing") == 0)
	{
		GiveInventory("NanoArmor", 2);
	}
}
Script "CheckPlayerEnter" ENTER
{
	action1Recharge[PlayerNumber()] = 0;
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		ACS_NamedExecuteAlways("SetupPlayerMP", 0);
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0);
}

Script "CheckPlayerReturn" RETURN
{
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		ACS_NamedExecuteAlways("SetupPlayerMP", 0);
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0);
}

script "CheckPlayerRespawn" RESPAWN
{
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		ACS_NamedExecuteAlways("SetupPlayerMP", 0);
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0 );
}

Script "SetupPlayerMP" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		//Doesnt need a check for alph_noactions as that is handled in the action ability script itself.
		setAction(GetCVAR("alph_action"));
		if(GetCVAR("alph_nopassives") == false)
		{
			setPassive(GetCVAR("alph_passive")); //Need this before weapon for bandolier check.
		}
		if(GetCVAR("alph_startcarbine") == false)
		{
			setStartWeapon(GetCVARString("alph_startweapon"));
		}
		else
		{
			setStartWeapon("PhotonCarbine");
		}
		gamemodeCheck();
		ACS_NamedExecuteAlways("RestoreActionTimers", 0);
		//Doesnt need a check for alph_notravels as that is handled in the travel ability script itself.
		ACS_NamedExecuteAlways("TravelSetup", 0);
		ACS_NamedExecuteAlways("TravelSetupClient", 0);
		
		ACS_NamedExecuteAlways("ZoomSetup", 0);
		ACS_NamedExecuteAlways("ZoomSetupClient", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetup", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetupClient", 0);
	}
}
Script "PlayerDeath" DEATH
{
	Thing_ChangeTID(0, 0);
}
Script "PlayerDisconnect" (int playerwholeft) DISCONNECT
{
	Thing_ChangeTID(0, 0);
}
Script "TargetDummySpawn" (void)
{
	Thing_ChangeTID(0, targetdummyid);
	targetdummyid++;
	if(targetdummyid >= playeridbase)
	{
		targetdummyid = 900;
	}
}