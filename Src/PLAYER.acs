#library "player"
#include "zcommon.acs"
#import "ALPHLIB.acs"
#import "ACTIONS.acs"
#import "TRAVEL.acs"
#import "HUD.acs"
#import "PASSIVES.acs"

#define TUTORIAL_LEVELNUM 901
int playeridbase = 1000;

//Stored here so changes made mid-game don't stick
bool forcerandom = false;
bool startcarbine = false;
bool notravels = false;
bool noactions = false;
bool nopassives = false;

function void setPassive(int p)
{
	if(p == 100 || forcerandom == true)
	{
		p = random(1, 4);
	}
	switch(p)
	{	
		case 0:
		GiveInventory("PassiveRapidAlt", 1);
		break;
		case 1:
		GiveInventory("PassiveSpeedDemon", 1);
		ACS_NamedExecuteAlways("SpeedDemonTimer", 0);
		break;
		case 2:
		GiveInventory("PassiveAdrenalineRush", 1);
		break;
		case 3:
		GiveInventory("PassiveBandolier", 1);
		break;
		case 4:
		GiveInventory("PassiveOverclocked", 1);
		ACS_NamedExecuteAlways("OverclockedTimer", 0);
		break;
		default: //0
		GiveInventory("PassiveAdrenalineRush", 1);
		break;
	}
	if(CheckInventory("PassiveSpeedDemon") > 0)
	{
		GiveInventory("ExtraTravelCharge", 1);
	}
	/*if(CheckInventory("PassiveNegaBarrier") > 0)
	{
		GiveInventory("NegaBarrier", 1);
		ACS_NamedExecuteAlways("NegaBarrierBubbleFX", 0);
	}*/
}
function void setAction(int a)
{
	if(a == 100 || forcerandom == true)
	{
		a = random(1, 5);
	}
	switch(a)
	{
		case 0:
		GiveInventory("ActionRegenZone", 1);
		break;
		case 1:
		GiveInventory("ActionAutoLaser", 1);
		break;
		case 2:
		GiveInventory("ActionPowerBrace", 1);
		break;
		case 3:
		GiveInventory("ActionDecoyHologram", 1);
		break;
		case 4:
		GiveInventory("ActionRicochetDisc", 1);
		break;
		case 5:
		GiveInventory("ActionShockSlam", 1);
		break;
		default:
		GiveInventory("ActionRegenZone", 1);
		break;
	}
}
function void setStartWeapon(str sw)
{
	if(sw == "Random" || forcerandom == true)
	{
		sw = WEAP_CLASSNAMES[random(0, NUM_WEAPS-1)];
	}
	
	GiveInventory(sw, 1);
	
	if(	!CheckInventory("PhotonCarbine") &&
		!CheckInventory("ParticleSplitter") &&
		!CheckInventory("TeslaSMG") &&
		!CheckInventory("C14") &&
		!CheckInventory("SparkCannon") &&
		!CheckInventory("Flamespitter") && 
		!CheckInventory("BeamRifle"))
		{
			GiveInventory("PhotonCarbine", 1);
		}
		
	for(int j = 0; j < NUM_WEAPS; j++)
	{
		GiveInventory(WEAP_ENERGYNAMES[j], GetAmmoCapacity(WEAP_ENERGYNAMES[j]));
	}
}
function void gamemodeCheck(void)
{
	if(StrICmp(GetCurrentGameMode(), "Last Man Standing") == 0 || StrICmp(GetCurrentGameMode(), "Team Last Man Standing") == 0)
	{
		GiveInventory("NanoArmor", 2);
	}
}
//Stores the CVARs into seperate variables when the map is loaded, so changes to the CVARs don't affect players mid-game.
Script "SetWorldVariables" OPEN
{
	if(GetCVAR("alph_forcerandom") == true)
	{
		forcerandom = true;
	}
	if(GetCVAR("alph_startcarbine") == true)
	{
		startcarbine = true;
	}
	if(GetCVAR("alph_notravels") == true)
	{
		notravels = true;
	}
	if(GetCVAR("alph_noactions") == true)
	{
		noactions = true;
	}
	if(GetCVAR("alph_nopassives") == true)
	{
		nopassives = true;
	}
}
Script "CheckPlayerEnter" ENTER
{
	action1Recharge[PlayerNumber()] = 0;
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		if(GetLevelInfo(LEVELINFO_LEVELNUM) != TUTORIAL_LEVELNUM)
		{
			ACS_NamedExecuteAlways("SetupPlayerMP", 0);
		}
		else
		{
			ACS_NamedExecuteAlways("SetupPlayerTutorial", 0);
		}
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0);
}

Script "CheckPlayerReturn" RETURN
{
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		ACS_NamedExecuteAlways("SetupPlayerMP", 0);
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0);
}

script "CheckPlayerRespawn" RESPAWN
{
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	ClearInventory();
	if(ClassifyActor(0) & ACTOR_BOT)
	{
		ACS_NamedExecuteAlways("SetupBot", 0);
	}
	else
	{
		ACS_NamedExecuteAlways("SetupPlayerMP", 0);
	}
	ACS_NamedExecuteAlways("SBARActionFixer", 0);
	//ACS_NamedExecuteAlways("DisplayLoadoutHUD", 0 );
}

Script "SetupPlayerMP" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		if(noactions == false)
		{
			setAction(GetCVAR("alph_action"));
		}
		if(nopassives == false)
		{
			setPassive(GetCVAR("alph_passive")); //Need this before weapon for bandolier check.
		}
		if(startcarbine == false)
		{
			setStartWeapon(GetCVARString("alph_startweapon"));
		}
		else
		{
			setStartWeapon("PhotonCarbine");
		}
		gamemodeCheck();
		ACS_NamedExecuteAlways("RestoreActionTimers", 0);
		
		if(notravels == false)
		{
			int trav = GetCVAR("alph_travel");
			if (trav == 100 || forcerandom == true)
			{
				trav = random(0, 3);
			}
			//THESE TWO trav VALUES MUST BE THE SAME
			ACS_NamedExecuteAlways("TravelSetupServer", 0, trav);
			ACS_NamedExecuteAlways("TravelSetupClient", 0, trav);
		}
		ACS_NamedExecuteAlways("ZoomSetup", 0);
		ACS_NamedExecuteAlways("ZoomSetupClient", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetup", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetupClient", 0);
		//C14 Gas damage respawn protection
		GiveInventory("C14RespawnProtection", 1);
	}
}
Script "SetupPlayerTutorial" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		setStartWeapon("PhotonCarbine");
		//gamemodeCheck();
		ACS_NamedExecuteAlways("TutorialTravelSetup", 0);
		ACS_NamedExecuteAlways("TutorialTravelSetupClient", 0);
		
		ACS_NamedExecuteAlways("ZoomSetup", 0);
		ACS_NamedExecuteAlways("ZoomSetupClient", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetup", 0);
		ACS_NamedExecuteAlways("WeaponGlowSetupClient", 0);
	}
	SetHudSize(640, 400, TRUE);
	HUDMessage(s:"Welcome to the Alphatius Tutorial!"; HUDMSG_PLAIN, 100, CR_RED,  320.0, 200.0, 2.5);
}
Script "PlayerDeath" DEATH
{
	Thing_ChangeTID(0, 0);
}
Script "PlayerDisconnect" (int playerwholeft) DISCONNECT
{
	Thing_ChangeTID(0, 0);
}