#library "travel"
#include "zcommon.acs"
#import "ACTIONS.acs"
#import "PLAYER.acs"
#import "ALPHLIB.acs"

//#libdefine TRAV_TBOOTS_CD 105
//#libdefine TRAV_WARPD_CD 105
//#libdefine TRAV_JTHRUST_CD 140
//#libdefine TRAV_HYPERD_CD 175
#libdefine TRAV_HYPERD_DUR 70
#libdefine TRAV_WARPD_STRENGTH 1.4

function void travelSucceed(void)
{
	
}
Script "TravelAbility" (void) net
{
	//SetFont("ALPHFONT");
	if(ClassifyActor(0) & ACTOR_DEAD)
	{
	
	}
	else if (!(ClassifyActor(0) & ACTOR_PLAYER))
	{
	
	}
	else if(PlayerIsSpectator(PlayerNumber()) != 0)
	{
	
	}
	else
	{
		if(CheckInventory("TravelThrusterBoots") == 1)
		{
			ACS_NamedExecuteAlways("ThrusterBoots", 0);
		}
		else if(CheckInventory("TravelJumpThrust") == 1)
		{
			ACS_NamedExecuteAlways("JumpThrust", 0);
		}
		else if(CheckInventory("TravelWarpDrive") == 1)
		{
			ACS_NamedExecuteAlways("WarpDrive", 0);
		}
		else if(CheckInventory("TravelHyperdrive") == 1)
		{
			ACS_NamedExecuteAlways("Hyperdrive", 0);
		}
		else
		{
			//displayHUDText("Error in processing your travel ability. Reset it in the loadout menu.", 0.6, 2.0, 1301);
			LocalAmbientSound("General/Fail",96);
		}
	}
}

Script "ThrusterBoots" (void)
{	
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("ThrusterBootsCharge") == 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		int thrust = 24;
		if(!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
			if(GetPlayerInput(-1, INPUT_FORWARDMOVE) == 0 
			&& GetPlayerInput(-1, INPUT_SIDEMOVE) == 0)
			{
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			}
			//Check Controller input
			else
			{
				int fmove = GetPlayerInput(-1, INPUT_FORWARDMOVE);
				int smove = GetPlayerInput(-1, INPUT_SIDEMOVE);
				if(smove != 0 && fmove != 0)
				{
					thrust = 18;
				}
				if(smove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 64, thrust, 1, 0);
				}
				if(smove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 192, thrust, 1, 0);
				}
				if(fmove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 128, thrust, 1, 0);
				}
				if(fmove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8), thrust, 1, 0);
				}
			}
		}
		else
		{
			bool movefront = (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) || (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD);
			bool moveside = (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT) || (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT);
			
			if(movefront && moveside)
			{
				thrust = 18;
			}
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
				ThrustThing((GetActorAngle(0) >> 8) + 128, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
				ThrustThing((GetActorAngle(0) >> 8) + 64, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
				ThrustThing((GetActorAngle(0) >> 8) + 192, thrust, 1, 0);
		}
		ThrustThingZ(0, 4, 0, 1);
		if(!hasTravelPickup)
		{
			TakeInventory("ThrusterBootsCharge", 1);
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		PlaySound(0, "Travel/ThrusterBoots", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		//delay(6);
		//SetActorVelocity(0, GetActorVelX(0) / 2, GetActorVelY(0) / 2, 0.0, false, false);
		
	}
}
Script "JumpThrust" (void)
{
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("JThrustCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0) + 0.05; //Up is positive now
		int upordown;
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		ThrustThing(angle >> 8, ((cos(abs(pitch))) >> 8) / 12, 1, 0);
		ThrustThingZ(0, ((sin(abs(pitch))) >> 8) / 3, upordown, 1);
		if(!hasTravelPickup)
		{
			GiveInventory("JThrustCD",GetAmmoCapacity("JThrustCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}

Script "WarpDrive" (void)
{
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("WDriveCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		if(!hasTravelPickup)
		{
			GiveInventory("WDriveCD",GetAmmoCapacity("WDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0); //Up is positive now
		int upordown;
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		PlaySound(0, "Travel/WarpStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		GiveInventory("PowerWarpInvisibility", 1);
		GiveInventory("PowerWarpInvulnerability", 1);
		int velx, vely, velz;
		velx = GetActorVelX(0);
		vely = GetActorVelY(0);
		velz = GetActorVelZ(0);
		ThrustThing(angle >> 8, (((cos(abs(pitch))) >> 8) * FixedMul(0.25, TRAV_WARPD_STRENGTH)) >> 16, 1, 0);
		ThrustThingZ(0, (((sin(abs(pitch))) >> 8) * FixedMul(1.0, TRAV_WARPD_STRENGTH)) >> 16, upordown, 1);
		PlaySound(0,"Travel/WarpStart");
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		Delay(5);
		Thing_Stop(0);
		SetActorVelocity(0, velx, vely, velz, false, false);
		TakeInventory("PowerWarpInvisibility", 1);
		TakeInventory("PowerWarpInvulnerability", 1);
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		PlaySound(0, "Travel/WarpDone", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		
	
	}
}
Script "Hyperdrive" (void)
{
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if ((CheckInventory("HDriveCD") > 0 && !hasTravelPickup) || CheckInventory("HyperdriveSpeed") > 0)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		GiveInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		int counter = 0;
		while((ClassifyActor(0) & ACTOR_ALIVE) && counter < TRAV_HYPERD_DUR)
		{
			delay(1);
			counter++;
		}
		TakeInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveEnd", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		if(!hasTravelPickup)
		{
			GiveInventory("HDriveCD",GetAmmoCapacity("HDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}
Script "TravelFail" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		displayHUDText("Travel ability on cooldown.", 0.6, 2.0, 1301);
		LocalAmbientSound("General/Fail",96);
		terminate;
	}
}