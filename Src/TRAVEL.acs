#library "travel"
#include "zcommon.acs"
#import "ACTIONS.acs"
#import "PLAYER.acs"
#import "ALPHLIB.acs"

#define HYPERD_DUR 12
#define HYPERD_WALLJUMP_Z 12.0
#define HYPERD_WALLJUMP_XY 6.0
#define WARPD_STRENGTH 8.0
#define WARP_TICKS_TOTAL 2
#define TBOOTS_STRENGTH 16


Script "TravelSetupClient" (void) CLIENTSIDE
{
	switch(GetCVAR("alph_travel"))
	{
		case 1:
		SetActionScript(0, BT_USER1, "WarpDriveNew");
		SetActionScript(0, 0, "WarpDriveActive");
		break;
		case 2:
		SetActionScript(0, BT_USER1, "HyperdriveNew");
		break;
		//case 3:
		//SetActionScript(0, BT_USER1, "JumpThrustNew");
		//break;
		default:
		SetActionScript(0, BT_USER1, "ThrusterBootsNew");
		break;
	}
}

Script "TravelSetup" (void)
{
	switch(GetCVAR("alph_travel"))
	{
		case 1:
		GiveInventory("TravelWarpDrive", 1);
		SetActionScript(0, BT_USER1, "WarpDriveNew");
		SetActionScript(0, 0, "WarpDriveActive");
		break;
		break;
		case 2:
		GiveInventory("TravelHyperdrive", 1);
		SetActorProperty(0, APROP_SECONDJUMPAMOUNT, 1);
		SetActorProperty(0, APROP_WALLJUMP, 2);
		SetActorProperty(0, APROP_SECONDJUMPZ, HYPERD_WALLJUMP_Z);
		SetActorProperty(0, APROP_SECONDJUMPXY, HYPERD_WALLJUMP_XY);
		SetEffectActor(0, EA_SECOND_JUMP, "HyperdriveWallJumpFX");
		SetActionScript(0, BT_USER1, "HyperdriveNew");
		break;
		//case 3:
		//GiveInventory("TravelJumpThrust", 1);
		//SetActionScript(0, BT_USER1, "JumpThrustNew");
		//break;
		default:
		GiveInventory("TravelThrusterBoots", 1);
		GiveInventory("ThrusterBootsCharge", 2);
		SetActionScript(0, BT_USER1, "ThrusterBootsNew");
		break;
	}
}
/*Script "CrouchScript" ENTER
{
	while(true)
	{
		if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_CROUCH)
		{
			SetActorProperty(0, APROP_FootstepVolume, 0.0);
		}
		else
		{
			SetActorProperty(0, APROP_FootstepVolume, 1.0);	
		}
		
		delay(1);
	}
}*/
Script "ThrusterBootsNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
        if(predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool hasTBootsCharge = (CheckInventory("ThrusterBootsCharge") > 0);
			//If the player has a charge of the ability...
            if (hasTravelPickup || hasTBootsCharge)
            {
                SetPredictableValue(0, 0, 1);
				//Play the sound and 
				TakeInventory("ThrusterBootsSmokeTics", 350);
				GiveInventory("ThrusterBootsSmokeTics", 18);
				PlaySound(0, "Travel/ThrusterBoots", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					TakeInventory("ThrusterBootsCharge", 1);
            }
        }
        if (GetPredictableValue(0, 0) == 1)
        {
			int thrust = TBOOTS_STRENGTH;
			if(!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
			{
				//No directional input
				if(GetPlayerInput(-1, INPUT_FORWARDMOVE) == 0 
				&& GetPlayerInput(-1, INPUT_SIDEMOVE) == 0)
				{
					ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
				}
				//Controller Input
				else
				{
					int fmove = GetPlayerInput(-1, INPUT_FORWARDMOVE);
					int smove = GetPlayerInput(-1, INPUT_SIDEMOVE);
					//Reduce Thrust at diagonals
					if(fmove != 0 && smove != 0)
						thrust = TBOOTS_STRENGTH * 3 / 4;
					
					if(smove < 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 64, thrust, 1, 0);
					}
					if(smove > 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 192, thrust, 1, 0);
					}
					if(fmove < 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 128, thrust, 1, 0);
					}
					if(fmove > 0)
					{
						ThrustThing((GetActorAngle(0)>>8), thrust, 1, 0);
					}
				}
			}
			//Keyboard input
			else
			{
				//Reduce thrust at diagonals.
				if((GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
				{
					thrust = 12;
				}
					
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
					ThrustThing((GetActorAngle(0) >> 8) + 128, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
					ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					ThrustThing((GetActorAngle(0) >> 8) + 64, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
					ThrustThing((GetActorAngle(0) >> 8) + 192, thrust, 1, 0);
			}
			ThrustThingZ(0, 4, 0, 1);
        }
    }
}
Script "JumpThrustNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
        if(predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool jThrustOnCD = (CheckInventory("JThrustCD") > 0);
            if (hasTravelPickup || !jThrustOnCD)
            {
				PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
				SpawnSpotFacingForced("JumpThrustSmokeSpawner", 0, 0);
				SetPredictableValue(0, 0, 1);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					GiveInventory("JThrustCD",GetAmmoCapacity("JThrustCD"));
            }
        }
        if (GetPredictableValue(0, 0) == 1)
        {
			int angle = GetActorAngle(0);
			int pitch = -GetActorPitch(0); //Up is positive now
			int upordown;
			if(pitch > 0.0) //greater than center
				upordown = 0;
			else
				upordown = 1;
			ThrustThing(angle >> 8, ((cos(abs(pitch))) >> 8) / 12, 1, 0);
			ThrustThingZ(0, ((sin(abs(pitch))) >> 8) / 2, upordown, 1);
        }
    }
}
Script "HyperdriveNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
		if(predicting == 0)
		{
			bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
			bool hDriveOnCD = (CheckInventory("HDriveCD") > 0);
			if (hasTravelPickup || !hDriveOnCD)
            {
				PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
				SpawnSpotFacingForced("JumpThrustSmokeSpawner", 0, 0);
				SetPredictableValue(0, 0, 1);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					GiveInventory("HDriveCD",GetAmmoCapacity("HDriveCD"));
            }
		}
		if (GetPredictableValue(0, 0) == 1)
		{
			int angle = GetActorAngle(0);
			ThrustThing(angle >> 8, 16, 1, 0);
			ThrustThingZ(0, 16, 0, 1);
		}
    }
}
int warpDriveTicks[64];
int warpDriveVelx[64];
int warpDriveVely[64];
int warpDriveVelz[64];
Script "WarpDriveNew" (int predicting, int pressed, int released, int buttons)
{
    if (pressed)
    {
        if (predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool wDriveOnCD = CheckInventory("WDriveCD") > 0;
            
            if (hasTravelPickup || !wDriveOnCD)
            {
				warpDriveVelx[PlayerNumber()] = GetActorVelX(0);
				warpDriveVely[PlayerNumber()] = GetActorVelY(0);
				warpDriveVelz[PlayerNumber()] = GetActorVelZ(0);
                warpDriveTicks[PlayerNumber()] = WARP_TICKS_TOTAL;
                SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]);
                //SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
                PlaySound(0, "Travel/WarpStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
                
                SetNetworkReplicationFlags( NETREP_SKIPOWNER );
                GiveInventory("PowerWarpInvisibility", 1);
                GiveInventory("PowerWarpInvulnerability", 1);
                if(CheckInventory("ExtraTravelCharge") > 0)
                    TakeInventory("ExtraTravelCharge", 1);
                else
                    GiveInventory("WDriveCD",GetAmmoCapacity("WDriveCD"));
                SpawnSpotFacingForced("TeleportFog", 0, 0);
                SetNetworkReplicationFlags( 0 );
            }
        }
    }
}
Script "WarpDriveActive" (int predicting, int pressed, int released, int buttons)
{
    int ticks;
    if (predicting)
        ticks = GetPredictableValue(0, 0);
    else
        ticks = warpDriveTicks[PlayerNumber()];

    if (ticks == WARP_TICKS_TOTAL)
    {
        int angle = GetActorAngle(0);
        int pitch = -GetActorPitch(0); //Up is positive now
        int upordown;
        if(pitch > 0)
            upordown = 0;
        else
            upordown = 1;
        
        ThrustThing(angle >> 8, (((cos(abs(pitch))) >> 8) * FixedMul(0.25, WARPD_STRENGTH)) >> 16, 1, 0);
        ThrustThingZ(0, (((sin(abs(pitch))) >> 8) * FixedMul(1.0, WARPD_STRENGTH)) >> 16, upordown, 1);
        
        if (predicting == 0)
        {
            SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
            warpDriveTicks[PlayerNumber()] = warpDriveTicks[PlayerNumber()] - 1;
        }
    }
    else if (ticks > 1 && predicting == 0)
    {
        SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
        warpDriveTicks[PlayerNumber()] = warpDriveTicks[PlayerNumber()] - 1;
    }
    else if (ticks == 1)
    {
        Thing_Stop(0);
        SetActorVelocity(0, warpDriveVelx[PlayerNumber()], warpDriveVely[PlayerNumber()], warpDriveVelz[PlayerNumber()], false, false);
        
        if (predicting == 0)
        {
            SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
            warpDriveTicks[PlayerNumber()] = 0;
			//warpDriveVelx[PlayerNumber()] = 0;
			//warpDriveVely[PlayerNumber()] = 0;
			//warpDriveVelz[PlayerNumber()] = 0;
            //SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            PlaySound(0, "Travel/WarpDone", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
            
            SetNetworkReplicationFlags( NETREP_SKIPOWNER );
            TakeInventory("PowerWarpInvisibility", 1);
            TakeInventory("PowerWarpInvulnerability", 1);
            SpawnSpotFacingForced("TeleportFog", 0, 0);
            SetNetworkReplicationFlags( 0 );
        }
    }
}

Script "TravelAbilityBot" (void)
{
	//SetFont("ALPHFONT");
	if(ClassifyActor(0) & ACTOR_DEAD)
	{
	
	}
	else if ((ClassifyActor(0) & ACTOR_PLAYER))
	{
	
	}
	else if(PlayerIsSpectator(PlayerNumber()) != 0)
	{
	
	}
	else
	{
		if(CheckInventory("TravelThrusterBoots") == 1)
		{
			ACS_NamedExecuteAlways("ThrusterBoots", 0);
		}
		else if(CheckInventory("TravelJumpThrust") == 1)
		{
			ACS_NamedExecuteAlways("JumpThrust", 0);
		}
		else if(CheckInventory("TravelWarpDrive") == 1)
		{
			ACS_NamedExecuteAlways("WarpDrive", 0);
		}
		else if(CheckInventory("TravelHyperdrive") == 1)
		{
			ACS_NamedExecuteAlways("Hyperdrive", 0);
		}
		else
		{
			LocalAmbientSound("General/Fail",96);
		}
	}
}

Script "ThrusterBoots" (void)
{	
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("ThrusterBootsCharge") == 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		TakeInventory("ThrusterBootsSmokeTics", 350);
		GiveInventory("ThrusterBootsSmokeTics", 18);
		int thrust = TBOOTS_STRENGTH;
		if(!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
			if(GetPlayerInput(-1, INPUT_FORWARDMOVE) == 0 
			&& GetPlayerInput(-1, INPUT_SIDEMOVE) == 0)
			{
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			}
			//Check Controller input
			else
			{
				int fmove = GetPlayerInput(-1, INPUT_FORWARDMOVE);
				int smove = GetPlayerInput(-1, INPUT_SIDEMOVE);
				if(smove != 0 && fmove != 0)
				{
					thrust = TBOOTS_STRENGTH * 3 / 4;
				}
				if(smove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 64, thrust, 1, 0);
				}
				if(smove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 192, thrust, 1, 0);
				}
				if(fmove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 128, thrust, 1, 0);
				}
				if(fmove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8), thrust, 1, 0);
				}
			}
		}
		else
		{
			bool movefront = (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) || (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD);
			bool moveside = (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT) || (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT);
			
			if(movefront && moveside)
			{
				thrust = TBOOTS_STRENGTH * 3 / 4;
			}
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
				ThrustThing((GetActorAngle(0) >> 8) + 128, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
				ThrustThing((GetActorAngle(0) >> 8) + 64, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
				ThrustThing((GetActorAngle(0) >> 8) + 192, thrust, 1, 0);
		}
		ThrustThingZ(0, 4, 0, 1);
		if(!hasTravelPickup)
		{
			TakeInventory("ThrusterBootsCharge", 1);
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		PlaySound(0, "Travel/ThrusterBoots", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		//delay(6);
		//SetActorVelocity(0, GetActorVelX(0) / 2, GetActorVelY(0) / 2, 0.0, false, false);
		
	}
}
Script "JumpThrust" (void)
{
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("JThrustCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		SpawnSpotFacingForced("JumpThrustSmokeSpawner", 0, 0);
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0) + 0.05; //Up is positive now
		int upordown;
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		ThrustThing(angle >> 8, ((cos(abs(pitch))) >> 8) / 12, 1, 0);
		ThrustThingZ(0, ((sin(abs(pitch))) >> 8) / 2, upordown, 1);
		if(!hasTravelPickup)
		{
			GiveInventory("JThrustCD",GetAmmoCapacity("JThrustCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}

Script "WarpDrive" (void)
{
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("WDriveCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		if(!hasTravelPickup)
		{
			GiveInventory("WDriveCD",GetAmmoCapacity("WDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0); //Up is positive now
		int upordown;
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		PlaySound(0, "Travel/WarpStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		GiveInventory("PowerWarpInvisibility", 1);
		GiveInventory("PowerWarpInvulnerability", 1);
		int velx, vely, velz;
		velx = GetActorVelX(0);
		vely = GetActorVelY(0);
		velz = GetActorVelZ(0);
		ThrustThing(angle >> 8, (((cos(abs(pitch))) >> 8) * FixedMul(0.25, WARPD_STRENGTH)) >> 16, 1, 0);
		ThrustThingZ(0, (((sin(abs(pitch))) >> 8) * FixedMul(1.0, WARPD_STRENGTH)) >> 16, upordown, 1);
		PlaySound(0,"Travel/WarpStart");
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		Delay(WARP_TICKS_TOTAL);
		Thing_Stop(0);
		SetActorVelocity(0, velx, vely, velz, false, false);
		TakeInventory("PowerWarpInvisibility", 1);
		TakeInventory("PowerWarpInvulnerability", 1);
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		PlaySound(0, "Travel/WarpDone", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		
	
	}
}
Script "Hyperdrive" (void)
{
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if ((CheckInventory("HDriveCD") > 0 && !hasTravelPickup) || CheckInventory("HyperdriveSpeed") > 0)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		GiveInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		delay(HYPERD_DUR);
		TakeInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveEnd", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		if(!hasTravelPickup)
		{
			GiveInventory("HDriveCD",GetAmmoCapacity("HDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}
Script "TravelFail" (void)
{
	displayHUDText("Travel ability on cooldown.", 0.6, 2.0, 1301);
	LocalAmbientSound("General/Fail",96);
	terminate;
}