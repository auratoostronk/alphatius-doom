#library "travel"
#include "zcommon.acs"
#import "ACTIONS.acs"
#import "PLAYER.acs"
#import "ALPHLIB.acs"

//#libdefine TRAV_TBOOTS_CD 105
//#libdefine TRAV_WARPD_CD 105
//#libdefine TRAV_JTHRUST_CD 140
//#libdefine TRAV_HYPERD_CD 175
#define TRAV_WARPD_STRENGTH 1.6
#define WARP_TICKS_TOTAL 6

function void travelSucceed(void)
{
	
}
Script "TravelSetupClient" (void) CLIENTSIDE
{
	switch(GetCVAR("alph_travel"))
	{
		case 1:
		SetActionScript(0, BT_USER1, "WarpDriveNew");
		SetActionScript(0, 0, "WarpDriveActive");
		break;
		case 2:
		SetActionScript(0, BT_USER1, "HyperdriveNew");
		break;
		case 3:
		SetActionScript(0, BT_USER1, "JumpThrustNew");
		break;
		default:
		SetActionScript(0, BT_USER1, "ThrusterBootsNew");
		break;
	}
}

Script "TravelSetup" (void)
{
	switch(GetCVAR("alph_travel"))
	{
	
		case 1:
		GiveInventory("TravelWarpDrive", 1);
		SetActionScript(0, BT_USER1, "WarpDriveNew");
		SetActionScript(0, 0, "WarpDriveActive");
		break;
		break;
		case 2:
		GiveInventory("TravelHyperdrive", 1);
		SetActionScript(0, BT_USER1, "HyperdriveNew");
		break;
		case 3:
		GiveInventory("TravelJumpThrust", 1);
		SetActionScript(0, BT_USER1, "JumpThrustNew");
		break;
		default:
		GiveInventory("TravelThrusterBoots", 1);
		GiveInventory("ThrusterBootsCharge", 2);
		SetActionScript(0, BT_USER1, "ThrusterBootsNew");
		break;
	}
}
Script "BotTravelAbility" (void)
{
	//SetFont("ALPHFONT");
	if(ClassifyActor(0) & ACTOR_DEAD)
	{
	
	}
	else
	{
		if(CheckInventory("TravelThrusterBoots") == 1)
		{
			ACS_NamedExecuteAlways("ThrusterBoots", 0);
		}
		else if(CheckInventory("TravelJumpThrust") == 1)
		{
			ACS_NamedExecuteAlways("JumpThrust", 0);
		}
		else if(CheckInventory("TravelWarpDrive") == 1)
		{
			ACS_NamedExecuteAlways("WarpDrive", 0);
		}
		else if(CheckInventory("TravelHyperdrive") == 1)
		{
			ACS_NamedExecuteAlways("Hyperdrive", 0);
		}
	}
}
Script "ThrusterBootsNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
        if(predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool hasTBootsCharge = (CheckInventory("ThrusterBootsCharge") > 0);
			//If the player has a charge of the ability...
            if (hasTravelPickup || hasTBootsCharge)
            {
				//Play the sound and 
				PlaySound(0, "Travel/ThrusterBoots", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
                SetPredictableValue(0, 0, 1);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					TakeInventory("ThrusterBootsCharge", 1);
            }
        }
        if (GetPredictableValue(0, 0) == 1)
        {
			int thrust = 24;
			if(!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
			&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
			{
				if(GetPlayerInput(-1, INPUT_FORWARDMOVE) == 0 
				&& GetPlayerInput(-1, INPUT_SIDEMOVE) == 0)
				{
					ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
				}
				else
				{
					int fmove = GetPlayerInput(-1, INPUT_FORWARDMOVE);
					int smove = GetPlayerInput(-1, INPUT_SIDEMOVE);
					//Reduce Thrust at diagonals
					if(fmove != 0 && smove != 0)
						thrust = 18;
					
					if(smove < 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 64, thrust, 1, 0);
					}
					if(smove > 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 192, thrust, 1, 0);
					}
					if(fmove < 0)
					{
						ThrustThing((GetActorAngle(0)>>8) + 128, thrust, 1, 0);
					}
					if(fmove > 0)
					{
						ThrustThing((GetActorAngle(0)>>8), thrust, 1, 0);
					}
				}
			}
			else
			{
				//Reduce thrust at diagonals.
				if((GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					|| (GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD) && (GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
				{
					thrust = 18;
				}
					
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
					ThrustThing((GetActorAngle(0) >> 8) + 128, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
					ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
					ThrustThing((GetActorAngle(0) >> 8) + 64, thrust, 1, 0);
				if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
					ThrustThing((GetActorAngle(0) >> 8) + 192, thrust, 1, 0);
			}
			ThrustThingZ(0, 4, 0, 1);
        }
    }
}
Script "JumpThrustNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
        if(predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool jThrustOnCD = (CheckInventory("JThrustCD") > 0);
            if (hasTravelPickup || !jThrustOnCD)
            {
				PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
                SetPredictableValue(0, 0, 1);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					GiveInventory("JThrustCD",GetAmmoCapacity("JThrustCD"));
            }
        }
        if (GetPredictableValue(0, 0) == 1)
        {
			int angle = GetActorAngle(0);
			int pitch = -GetActorPitch(0) + 0.05; //Up is positive now
			int upordown;
			if(pitch > 0)
				upordown = 0;
			else
				upordown = 1;
			ThrustThing(angle >> 8, ((cos(abs(pitch))) >> 8) / 12, 1, 0);
			ThrustThingZ(0, ((sin(abs(pitch))) >> 8) / 3, upordown, 1);
        }
    }
}
Script "HyperdriveNew" (int predicting, int pressed, int released, int buttons)
{
    if(pressed)
    {
        if(predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool hDriveOnCD = (CheckInventory("HDriveCD") > 0);
            if (hasTravelPickup || !hDriveOnCD)
            {
				PlaySound(0, "Travel/HyperdriveStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
				GiveInventory("HyperdriveSpeed", 1);
                SetPredictableValue(0, 0, 1);
                if(hasTravelPickup)
					TakeInventory("ExtraTravelCharge", 1);
				else
					GiveInventory("HDriveCD",GetAmmoCapacity("HDriveCD"));
            }
        }
		if (GetPredictableValue(0, 0) == 1)
		{
			delay(70);
			if(predicting == 0)
			{
				PlaySound(0, "Travel/HyperdriveEnd", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
				TakeInventory("HyperdriveSpeed", 1);
				SetPredictableValue(0, 0, 0);
			}
		}
    }
}
int warpDriveTicks[64];
int warpDriveVelx[64];
int warpDriveVely[64];
int warpDriveVelz[64];
Script "WarpDriveNew" (int predicting, int pressed, int released, int buttons)
{
    if (pressed)
    {
        if (predicting == 0)
        {
            bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
            bool wDriveOnCD = CheckInventory("WDriveCD") > 0;
            
            if (hasTravelPickup || !wDriveOnCD)
            {
                warpDriveTicks[PlayerNumber()] = WARP_TICKS_TOTAL;
                SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]);
                //SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
                PlaySound(0, "Travel/WarpStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
                
                SetNetworkReplicationFlags( NETREP_SKIPOWNER );
                GiveInventory("PowerWarpInvisibility", 1);
                GiveInventory("PowerWarpInvulnerability", 1);
                if(CheckInventory("ExtraTravelCharge") > 0)
                    TakeInventory("ExtraTravelCharge", 1);
                else
                    GiveInventory("WDriveCD",GetAmmoCapacity("WDriveCD"));
                SpawnSpotFacingForced("TeleportFog", 0, 0);
                SetNetworkReplicationFlags( 0 );
                
                warpDriveVelx[PlayerNumber()] = GetActorVelX(0);
                warpDriveVely[PlayerNumber()] = GetActorVelY(0);
                warpDriveVelz[PlayerNumber()] = GetActorVelZ(0);
            }
        }
    }
}
Script "WarpDriveActive" (int predicting, int pressed, int released, int buttons)
{
    int ticks;
    if (predicting)
        ticks = GetPredictableValue(0, 0);
    else
        ticks = warpDriveTicks[PlayerNumber()];

    if (ticks == WARP_TICKS_TOTAL)
    {
        int angle = GetActorAngle(0);
        int pitch = -GetActorPitch(0); //Up is positive now
        int upordown;
        if(pitch > 0)
            upordown = 0;
        else
            upordown = 1;
        
        ThrustThing(angle >> 8, (((cos(abs(pitch))) >> 8) * FixedMul(0.25, TRAV_WARPD_STRENGTH)) >> 16, 1, 0);
        ThrustThingZ(0, (((sin(abs(pitch))) >> 8) * FixedMul(1.0, TRAV_WARPD_STRENGTH)) >> 16, upordown, 1);
        
        if (predicting == 0)
        {
            SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
            warpDriveTicks[PlayerNumber()] = warpDriveTicks[PlayerNumber()] - 1;
        }
    }
    else if (ticks > 1 && predicting == 0)
    {
        SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
        warpDriveTicks[PlayerNumber()] = warpDriveTicks[PlayerNumber()] - 1;
    }
    else if (ticks == 1)
    {
        Thing_Stop(0);
        SetActorVelocity(0, warpDriveVelx[PlayerNumber()], warpDriveVely[PlayerNumber()], warpDriveVelz[PlayerNumber()], false, false);
        
        if (predicting == 0)
        {
            SetPredictableValue(0, 0, warpDriveTicks[PlayerNumber()]); // need to remember warp drive ticks for this tick
            warpDriveTicks[PlayerNumber()] = 0;
			warpDriveVelx[PlayerNumber()] = 0;
			warpDriveVely[PlayerNumber()] = 0;
			warpDriveVelz[PlayerNumber()] = 0;
            //SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            PlaySound(0, "Travel/WarpDone", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
            
            SetNetworkReplicationFlags( NETREP_SKIPOWNER );
            TakeInventory("PowerWarpInvisibility", 1);
            TakeInventory("PowerWarpInvulnerability", 1);
            SpawnSpotFacingForced("TeleportFog", 0, 0);
            SetNetworkReplicationFlags( 0 );
        }
    }
}
Script "ThrusterBoots" (void)
{	
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("ThrusterBootsCharge") == 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		int thrust = 24;
		if(!(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
		&& !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT))
		{
			if(GetPlayerInput(-1, INPUT_FORWARDMOVE) == 0 
			&& GetPlayerInput(-1, INPUT_SIDEMOVE) == 0)
			{
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			}
			else
			{
				int fmove = GetPlayerInput(-1, INPUT_FORWARDMOVE);
				int smove = GetPlayerInput(-1, INPUT_SIDEMOVE);
				if(smove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 64, thrust, 1, 0);
				}
				if(smove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 192, thrust, 1, 0);
				}
				if(fmove < 0)
				{
					ThrustThing((GetActorAngle(0)>>8) + 128, thrust, 1, 0);
				}
				if(fmove > 0)
				{
					ThrustThing((GetActorAngle(0)>>8), thrust, 1, 0);
				}
			}
		}
		else
		{
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_BACK)
				ThrustThing((GetActorAngle(0) >> 8) + 128, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_FORWARD)
				ThrustThing(GetActorAngle(0) >> 8, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVELEFT)
				ThrustThing((GetActorAngle(0) >> 8) + 64, thrust, 1, 0);
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_MOVERIGHT)
				ThrustThing((GetActorAngle(0) >> 8) + 192, thrust, 1, 0);
		}
		ThrustThingZ(0, 4, 0, 1);
		if(!hasTravelPickup)
		{
			TakeInventory("ThrusterBootsCharge", 1);
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		PlaySound(0, "Travel/ThrusterBoots", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		//delay(6);
		//SetActorVelocity(0, GetActorVelX(0) / 2, GetActorVelY(0) / 2, 0.0, false, false);
		
	}
}
Script "JumpThrust" (void)
{
	//SetFont("ALPHFONT");
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("JThrustCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		PlaySound(0, "Travel/JumpThrust", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		
		//Stores the direction the player is looking. Adds a slight upwards offset for later.
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0) + 0.05; //Up is positive now
		int upordown;
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		//Thrusts the player in the direction they are looking.
		ThrustThing(angle >> 8, ((cos(abs(pitch))) >> 8) / 12, 1, 0);
		ThrustThingZ(0, ((sin(abs(pitch))) >> 8) / 3, upordown, 1);
		//If the player doesn't have a travel sphere, put the ability on cooldown. Otherwise, take the sphere.
		if(!hasTravelPickup)
		{
			GiveInventory("JThrustCD",GetAmmoCapacity("JThrustCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}

Script "WarpDrive" (void)
{
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if (CheckInventory("WDriveCD") > 0 && !hasTravelPickup)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		//If the player doesn't have a travel sphere, put the ability on cooldown. Otherwise, take the sphere.
		if(!hasTravelPickup)
		{
			GiveInventory("WDriveCD",GetAmmoCapacity("WDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
		//Store angle and pitch of the player.
		int angle = GetActorAngle(0);
		int pitch = -GetActorPitch(0); //Up is positive now
		
		int upordown;
		
		//This will be used for ThrustThingZ to determine whether to thrust the player up or down.
		if(pitch > 0)
			upordown = 0;
		else
			upordown = 1;
		//Spawn Fog, play sound, give invis and invuln to the player.
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		PlaySound(0, "Travel/WarpStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		GiveInventory("PowerWarpInvisibility", 1);
		GiveInventory("PowerWarpInvulnerability", 1);
		
		//Store the player's current velocity. This will be applied after the teleport and after the stop.
		int velx, vely, velz;
		velx = GetActorVelX(0);
		vely = GetActorVelY(0);
		velz = GetActorVelZ(0);
		
		//Freeze the player's input.
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		
		//Thrust the player in the direction they are looking.
		ThrustThing(angle >> 8, (((cos(abs(pitch))) >> 8) * FixedMul(0.25, TRAV_WARPD_STRENGTH)) >> 16, 1, 0);
		ThrustThingZ(0, (((sin(abs(pitch))) >> 8) * FixedMul(1.0, TRAV_WARPD_STRENGTH)) >> 16, upordown, 1);
		
		//Heres the Delay:
		Delay(5);
		
		//Stop the player.
		Thing_Stop(0);
		//Apply the velocity that was stored earlier.
		SetActorVelocity(0, velx, vely, velz, false, false);
		//Take away the invis and invuln from the player.
		TakeInventory("PowerWarpInvisibility", 1);
		TakeInventory("PowerWarpInvulnerability", 1);
		//Spawn tele fog.
		SpawnSpotFacingForced("TeleportFog", 0, 0);
		//Play sound again.
		PlaySound(0, "Travel/WarpDone", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		//Unfreeze the player's input.
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		
	
	}
}
Script "Hyperdrive" (void)
{
	bool hasTravelPickup = (CheckInventory("ExtraTravelCharge") > 0);
	if ((CheckInventory("HDriveCD") > 0 && !hasTravelPickup) || CheckInventory("HyperdriveSpeed") > 0)
	{
		ACS_NamedExecuteAlways("TravelFail", 0);
	}
	else
	{
		travelSucceed();
		GiveInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveStart", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		int counter = 0;
		while((ClassifyActor(0) & ACTOR_ALIVE) && counter < GetAmmoCapacity("HyperdriveSpeed"))
		{
			delay(1);
			counter++;
		}
		TakeInventory("HyperdriveSpeed", 1);
		PlaySound(0, "Travel/HyperdriveEnd", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		if(!hasTravelPickup)
		{
			GiveInventory("HDriveCD",GetAmmoCapacity("HDriveCD"));
		}
		else
		{
			TakeInventory("ExtraTravelCharge", 1);
		}
	}
}
Script "TravelFail" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		displayHUDText("Travel ability on cooldown.", 0.6, 2.0, 1301);
		LocalAmbientSound("General/Fail",96);
		terminate;
	}
}