#library "PASSIVES"
#include "zcommon.acs"

#import "ALPHLIB.acs"
#import "PLAYER.acs"

#libdefine ARUSH_KILLSPD 0.1

//#define ADRUSH_DURATION 70.0
//#define ADRUSH_HEAL 20
#define BANDOLIER_RESTORE 0.25
#define RAPIDALT_RESTORE 105

function void rapidAlt(void)
{
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		TakeInventory(WEAP_COOLDOWNNAMES[i], RAPIDALT_RESTORE);//(GetAmmoCapacity(WEAP_COOLDOWNNAMES[i]) * RAPIDALT_RESTORE) >> 16);
	}
	LocalAmbientSound("General/AltReady", 0.5);
}
function void bandolier(void)
{
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		GiveInventory(WEAP_ENERGYNAMES[i], (GetAmmoCapacity(WEAP_ENERGYNAMES[i]) * BANDOLIER_RESTORE) >> 16);
	}
	LocalAmbientSound("General/WeaponReady", 0.5);
}

Script "PassiveDeath" DEATH
{
	//Do not do anything if you kill yourself :P
	if(IsPointerEqual(AAPTR_TARGET, AAPTR_DEFAULT))
		terminate;
	//Set activator to the killer.
	SetActivator(0, AAPTR_TARGET);
	if(CheckInventory("PassiveAdrenalineRush") > 0)
	{
		ACS_NamedExecuteAlways("AdrenalineRush", 0);
	}
	if(CheckInventory("PassiveRapidAlt") > 0)
	{
		rapidAlt();
	}
	if(CheckInventory("PassiveBandolier") > 0)
	{
		bandolier();
	}
	/*if(CheckInventory("PassiveSpeedDemon") > 0)
	{
		GiveInventory("ExtraTravelCharge", 1);
	}*/
}

Script "OverclockedTimer" (void)
{
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		if(CheckInventory("PassiveOverclocked") > 0)
		{
			TakeInventory("ActionCD", 1);
		}
		delay(5);
	}
}
Script "SpeedDemonTimer" (void)
{
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		if(CheckInventory("PassiveSpeedDemon") > 0)
		{
			TakeInventory("WDriveCD", 1);
			TakeInventory("TBootsCD", 1);
			TakeInventory("HDriveCD", 1);
			TakeInventory("JThrustCD", 1);
		}
		delay(5);
	}
}
Script "AdrenalineRush" (void)
{
	GiveInventory("PowerAdrenaline", 1);
	for(int i = 0; i < 10; i++)
	{
		if(ClassifyActor(0) & ACTOR_DEAD)
			terminate;
		GiveInventory("Health", 1);
		delay(7);
	}
	TakeInventory("PowerAdrenaline", 1);
}
Script "NegaBarrierBubbleFX" (void)
{
	int ptid = ActivatorTID();
	int utid = UniqueTID();
	SpawnSpotForced("NegaBarrierBubble", 0, utid, 0);
	SetActivator(utid);
	while(CheckActorInventory(ptid, "NegaBarrier") && (ClassifyActor(ptid) & ACTOR_ALIVE) && !(ClassifyActor(ptid) & ACTOR_WORLD))
	{
		Warp(ptid, 0, 0, 0, 0.0, WARPF_NOCHECKPOSITION);
		delay(1);
	}
	Thing_Remove(utid);
}