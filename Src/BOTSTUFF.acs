#library "botstuff"
#include "zcommon.acs"
#import "PLAYER.acs"
#import "ACTIONS.acs"
#import "ALPHLIB.acs"
#import "TRAVEL.acs"
#import "PASSIVES.acs"

#define BOT_ACTIONFREQ 0.1
//#define BOT_COUNT 11
//str BOT_NAMES[BOT_COUNT] = { "liljeck", "geNia", "Iko", "Kaminsky", "hiimaura", "[CR]yler", "[CR]abio", "ludwig", "Xen", "Kaapeli47", "[NE]Blushberry" };

function int VLength3d(int x, int y, int z)
{
	int len = VectorLength(x, y);
	len = VectorLength(z, len);
	return len;
}

function bool checkCombat(void)
{
	if(CheckInventory("EnergyRechargeCD") >= 55)
	{
		return true;
	}
	return false;
}
function bool botAbilChance(void)
{
	if(CheckInventory("ActionCD") != 0)
		return false;
	
	if(random(1, (35.0 / BOT_ACTIONFREQ) >> 16) == 1)
		return true;
		
	return false;
}

function void setTravel(int t)
{
	switch(t)
	{
		case 0:
		GiveInventory("TravelThrusterBoots", 1);
		break;
		case 1:
		GiveInventory("TravelWarpDrive", 1);
		break;
		case 2:
		GiveInventory("TravelHypersprint", 1);
		break;
		case 3:
		GiveInventory("TravelJetLeap", 1);
		break;
		case 4:
		GiveInventory("TravelMachCharge", 1);
		break;
		default:
		GiveInventory("TravelThrusterBoots", 1);
		break;
	}
}
Script "SetupBot" (void)
{
	Thing_ChangeTID(0, playeridbase + PlayerNumber());
	if(startcarbine == false)
	{
		setStartWeapon(WEAP_CLASSNAMES[random(0, NUM_WEAPS - 1)]);
	}
	else
	{
		setStartWeapon("PhotonCarbine");
	}
	if(notravels == false)
	{
		setTravel(random(0, 4));
	}
	if(noactions == false)
	{
		setAction(random(0, 5));
	}
	if(nopassives == false)
	{
		setPassive(random(0, 4));
	}
	gamemodeCheck();
	SetActorProperty(0, APROP_SPEED, 0.8);
	ACS_NamedExecuteAlways("StartBotAliveTimer", 0);
	ACS_NamedExecuteAlways("WeaponGlowSetup", 0);
	//C14 Gas damage respawn protection
	GiveInventory("C14RespawnProtection", 1);
}
Script "StartBotAliveTimer" (void)
{
	int cdrate = 1;
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		if(random(1, 35 / cdrate) == 1)
		{
			ACS_NamedExecuteAlways("TravelAbilityBot", 0);
		}
		
		//Action ability logic
		if(botAbilChance())
		{
			if(CheckInventory("ActionRegenZone") > 0)
			{
				if(GetActorProperty(0, APROP_HEALTH) < 40)
				{
					ACS_NamedExecuteAlways("ActionAbility1", 0);
				}
			}
			else if(CheckInventory("ActionPowerBrace") > 0)
			{
				if(checkCombat())
				{
					ACS_NamedExecuteAlways("ActionAbility1", 0);
				}
			}
			else if(CheckInventory("ActionDecoyHologram") > 0)
			{
				ACS_NamedExecuteAlways("ActionAbility1", 0);
			}
			else if(CheckInventory("ActionAutoLaser") > 0)
			{
				if(checkCombat())
				{
					ACS_NamedExecuteAlways("ActionAbility1", 0);
				}
			}
			else if(CheckInventory("ActionRicochetDisc") > 0)
			{
				if(checkCombat())
				{
					ACS_NamedExecuteAlways("ActionAbility1", 0);
				}
			}
			else if(CheckInventory("ActionShockSlam") > 0)
			{
				if(checkCombat())
				{
					ACS_NamedExecuteAlways("ActionAbility1", 0);
				}
			}
		}
		
		//Bot Change Weapons
		if(random(1, 105) == 1)
		{
			ACS_NamedExecuteAlways("BotChangeToAltWeapon", 0);
		}
		if(random(1, 350) == 1)
		{
			ACS_NamedExecuteAlways("BotChangeWeapon", 0);
		}
		
		//Alt fire presses
		if(random(1, 35 / cdrate) == 1)
		{
			GiveInventory("AltFirePressed", 1);
			GiveInventory("AltFireReleased", 1);
		}
		else
		{
			TakeInventory("AltFirePressed", 1);
			GiveInventory("AltFireReleased", 1);
		}
		
		//Check for weapons to give the alt-fire variant.
		for(int i = 0; i < NUM_WEAPS; i++)
		{
			if(CheckInventory(WEAP_CLASSNAMES[i]) && !CheckInventory(WEAP_ALTCLASSNAMES[i]))
			{
				GiveInventory(WEAP_ALTCLASSNAMES[i], 1);
			}
		}
		delay(1);
	}
}
//Required for the bots to swap weapons even if they have ammo for their current weapon.
Script "BotChangeWeapon" (void)
{
	bool swapSuccess;
	switch(random(1, 7))
	{
		case 1:
		swapSuccess = SetWeapon("ParticleSplitter");
		break;
		case 2:
		swapSuccess = SetWeapon("TeslaSMG");
		break;
		case 3:
		swapSuccess = SetWeapon("PhotonCarbine");
		break;
		case 4:
		swapSuccess = SetWeapon("C14");
		break;
		case 5:
		swapSuccess = SetWeapon("SparkCannon");
		break;
		case 6:
		swapSuccess = SetWeapon("Flamespitter");
		break;
		case 7:
		swapSuccess = SetWeapon("BeamRifle");
		break;
	}
}

//Required for the bots to use their alt-fire.
Script "BotChangeToAltWeapon" (void)
{
	int rand = random(1, 7);
	if(rand == 1 && CheckInventory("PSGAltCD") == 0)
	{
		SetWeapon("ParticleSplitterAlt");
	}
	if(rand == 2 && CheckInventory("SMGAltCD") == 0)
	{
		SetWeapon("TeslaSMGAlt");
	}
	if(rand == 3 && CheckInventory("CarbineAltCD") == 0)
	{
		SetWeapon("PhotonCarbineAlt");
	}
	if(rand == 4 && CheckInventory("C14AltCD") == 0)
	{
		SetWeapon("C14Alt");
	}
	if(rand == 5 && CheckInventory("SparkAltCD") == 0)
	{
		SetWeapon("SparkCannonAlt");
	}
	if(rand == 6 && CheckInventory("FlamespitterAltCD") == 0)
	{
		SetWeapon("FlamespitterAlt");
	}
	if(rand == 7)
	{
		SetWeapon("BeamRifleAlt");
	}
}
/*
//AUTOBOTS CLONE (EXCEPT DONE DIFFERENTLY, AND CLEANER TO LOOK AT)
Script "FillbotOpen" OPEN
{
	if(GetCVAR("sv_disallowbots") == true)
	{
		terminate;
	}
	if(GetCVAR("alph_botcount") == 0)
	{
		terminate;
	}
	if(GameType() == GAME_SINGLE_PLAYER || GameType() == GAME_NET_COOPERATIVE)
	{
		terminate;
	}
	else
	{
		int players = PlayerCount();// + SpectatorCount();
		int cvar = GetCVAR("alph_botcount");
		if(cvar > GetCVAR("sv_maxplayers"))
		{
			cvar = GetCVAR("sv_maxplayers");
		}
		if(cvar > GetCVAR("sv_maxclients"))
		{
			cvar = GetCVAR("sv_maxclients");	
		}
		if(players < cvar)
		{
			ConsoleCommand(StrParam(s:"addbot ", s:BOT_NAMES[random(0, BOT_COUNT-1)]));
		}
		else if(players > cvar)
		{
			ConsoleCommand("removebot");
		}
		delay(35);
		restart;
	}
}*/