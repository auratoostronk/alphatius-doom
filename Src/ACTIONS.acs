#library "actions"
#include "zcommon.acs"
#import "PLAYER.acs"
#import "ALPHLIB.acs"
#import "TRAVEL.acs"

//#libdefine FAST_ACTION_CD 10
//#libdefine MEDIUM_ACTION_CD 15
//#libdefine SLOW_ACTION_CD 20
#define AUTOLASER_SHOTSFIRED 20

global int 1:action1Recharge[];
//global int 2:decoyIDs[];


Script "ActionAbility1" (void) net
{
	if(ClassifyActor(0) & ACTOR_DEAD)
	{
	
	}
	else if (!(ClassifyActor(0) & ACTOR_PLAYER))
	{
	
	}
	else if(PlayerIsSpectator(PlayerNumber()) != 0)
	{
	
	}
	else
	{
		if(CheckInventory("ActionRegenZone") > 0)
		{
			ACS_NamedExecuteAlways("RegenerationZone", 0);
		}
		else if(CheckInventory("ActionPowerBrace") > 0)
		{
			ACS_NamedExecuteAlways("PowerBrace", 0);
		}
		else if(CheckInventory("ActionDecoyHologram") > 0)
		{
			ACS_NamedExecuteAlways("DecoyHologram", 0);
		}
		else if(CheckInventory("ActionAutoLaser") > 0)
		{
			ACS_NamedExecuteAlways("AutoLaser", 0);
		}
		else if(CheckInventory("ActionRicochetDisc") > 0)
		{
			ACS_NamedExecuteAlways("RicochetDisc", 0);
		}
		else if(CheckInventory("ActionShockSlam") > 0)
		{
			ACS_NamedExecuteAlways("ShockSlam", 0);
		}
		else
		{
			//displayHUDText("Error processing your action ability. Reset it in the Loadout menu.", 0.6, 2.0, 1301);
			//LocalAmbientSound("General/Fail",96);
		}
	}
}
Script "SaveActionTimers" DEATH
{
	action1Recharge[PlayerNumber()] = CheckInventory("ActionCD");
}
Script "RestoreActionTimers" (void)
{
	//if(StrICmp(GetCurrentGameMode(), "Last Man Standing") != 0 && StrICmp(GetCurrentGameMode(), "Team Last Man Standing") != 0)
	//{
		GiveInventory("ActionCD", action1Recharge[PlayerNumber()]);
	//}
}
Script "RegenerationZone" (void)
{
	if(CheckInventory("ActionCD") == 0)
	{
		GiveInventory("ActionCD", GetAmmoCapacity("ActionCD"));
		SpawnSpotForced("RegenZone", 0, 0, 0);
	}
	else
	{
		ACS_NamedExecuteAlways("Action1Fail", 0);
	}
}
Script "PowerBrace" (void)
{
	if(CheckInventory("ActionCD") == 0)
	{
		GiveInventory("ActionCD", GetAmmoCapacity("MediumActionCharge"));
		GiveInventory("PowerBrace", 1);
		ACS_NamedExecuteAlways("PowerBraceBubbleFX", 0);
		PlaySound(0, "Actions/PowerBraceOn", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
		delay(26); // 3/4'ths of a second
		TakeInventory("PowerBrace", 1);
		PlaySound(0, "Actions/PowerBraceOff", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
	}
	else
	{
		ACS_NamedExecuteAlways("Action1Fail", 0);
	}
}
Script "PowerBraceBubbleFX" (void)
{
	int ptid = ActivatorTID();
	int utid = UniqueTID(0, 999);
	SpawnSpotForced("PowerBraceBubble", 0, utid, 0);
	SetActivator(utid);
	while(CheckActorInventory(ptid, "PowerBrace") && (ClassifyActor(ptid) & ACTOR_ALIVE) && !(ClassifyActor(ptid) & ACTOR_WORLD))
	{
		Warp(ptid, 0, 0, 0, 0.0, WARPF_NOCHECKPOSITION);
		delay(1);
	}
	Thing_Remove(utid);
}
Script "DecoyUserDeath" DEATH
{
	//Breaks the link between the player and their decoy so that they cannot swap back to their decoy on death.
	//decoyIDs[PlayerNumber()] = 0;
}
Script "DecoyHologram" (void)
{
	/*if(isTIDUsed(decoyIDs[PlayerNumber()]) && decoyIDs[PlayerNumber()] != 0)
	{
		int tempTID = UniqueTID();
		int aTID = ActivatorTID();
		//Spawns a spawn spot at the Player's spot.
		SpawnSpotFacingForced("MapSpot", ActivatorTID(), tempTID);
		//Sets the player's location to the decoy's spot.
		Warp(decoyIDs[PlayerNumber()], 0, 0, 0, 0, 0);
		//Sets the decoy's location to the players' spot.
		SetActivator(decoyIDs[PlayerNumber()]);
		Warp(tempTID, 0, 0, 0, 0, 0);
		//Sets activator back to player.
		Thing_Destroy(tempTID, false, 0);
		SetActivator(aTID);
		decoyIDs[PlayerNumber()] = 0;
	}*/
	//else
	//{
		if(CheckInventory("ActionCD") == 0)
		{
			GiveInventory("ActionCD", GetAmmoCapacity("FastActionCharge"));
			int utid = UniqueTID();
			if(GetWeapon() == "C14" || GetWeapon() == "C14Alt")
			{
				SpawnSpotFacingForced("DecoyHologramGreen", 0, utid);
			}
			if(GetWeapon() == "PhotonCarbine" || GetWeapon() == "PhotonCarbineAlt")
			{
				SpawnSpotFacingForced("DecoyHologramBlue", 0, utid);
			}
			if(GetWeapon() == "TeslaSMG" || GetWeapon() == "TeslaSMGAlt")
			{
				SpawnSpotFacingForced("DecoyHologramYellow", 0, utid);
			}
			if(GetWeapon() == "ParticleSplitter" || GetWeapon() == "ParticleSplitterAlt")
			{
				SpawnSpotFacingForced("DecoyHologramPurple", 0, utid);
			}
			if(GetWeapon() == "SparkCannon" || GetWeapon() == "SparkCannonAlt")
			{
				SpawnSpotFacingForced("DecoyHologramRed", 0, utid);
			}
			if(GetWeapon() == "Flamespitter" || GetWeapon() == "FlamespitterAlt")
			{
				SpawnSpotFacingForced("DecoyHologramOrange", 0, utid);
			}
			if(GetWeapon() == "BeamRifle" || GetWeapon() == "BeamRifleAlt")
			{
				SpawnSpotFacingForced("DecoyHologramLightBlue", 0, utid);
			}
			Thing_SetTranslation(utid, -1);
			if(CheckInventory("NegaBarrier") > 0)
			{
				ACS_NamedExecuteAlways("DecoyBarrier", 0, utid);
			}
			if(CheckInventory("TravelHyperdrive") > 0)
			{
				//Uses a dummy boolean to keep track of hyperdrive on the decoy hologram actor
				SetActorProperty(utid, APROP_FRIGHTENED, TRUE);
			}
		}
		else
		{
			ACS_NamedExecuteAlways("Action1Fail", 0);
		}
	//}
}
Script "DecoyWalk" (void)
{
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		int movespeed = 14.0;
		//Uses the dummy boolean to boost speed of the decoy hologram actor
		if(GetActorProperty(0, APROP_FRIGHTENED) == TRUE)
		{
			movespeed = FixedMul(movespeed, HSPRINT_PASSIVESPD);
		}
		SetActorVelocity(0, FixedMul(movespeed, cos(GetActorAngle(0))), FixedMul(movespeed, sin(GetActorAngle(0))), GetActorVelZ(0), false, false);
		delay(1);
	}
}
Script "DecoyBarrier" (int ptid)
{
	int utid = UniqueTID();
	SpawnSpotForced("NegaBarrierBubble", 0, utid, 0);
	SetActivator(utid);
	while((ClassifyActor(ptid) & ACTOR_ALIVE) && !(ClassifyActor(ptid) & ACTOR_WORLD))
	{
		Warp(ptid, 0, 0, 0, 0.0, WARPF_NOCHECKPOSITION);
		delay(1);
	}
	Thing_Remove(utid);
}
Script "AutoLaser" (void)
{
	if(CheckInventory("ActionCD") == 0)
	{
		GiveInventory("ActionCD", GetAmmoCapacity("ActionCD"));
		//Need this so people don't abuse the damage buff from Assassin's Tactics while not firing their weapon.
		//ACS_NamedExecuteAlways("CheckAssassinTactics", 0);
		for(int i = 0; i < AUTOLASER_SHOTSFIRED; i++)
		{
			if(ClassifyActor(0) & ACTOR_DEAD)
				terminate;
			GiveInventory("FireAutoLaser", 1);
			PlaySound(0, "Actions/AutoLaser", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
			delay(4);
			TakeInventory("FireAutoLaser", 1);
		}
	}
	else
	{
		ACS_NamedExecuteAlways("Action1Fail", 0);
	}
}
Script "RicochetDisc" (void)
{
	if(CheckInventory("ActionCD") == 0)
	{
		GiveInventory("ActionCD", GetAmmoCapacity("ActionCD"));
		for(int i = 0; i < 5; i++)
		{
			GiveInventory("FireRicochetDisc", 1);
			PlaySound(0, "Actions/RicochetDiscFire", CHAN_AUTO, 1.0, false, ATTN_NORM, false);
			delay(4);
		}
	}
	else
	{
		ACS_NamedExecuteAlways("Action1Fail", 0);
	}
}
Script "ShockSlam" (void)
{
	if(CheckInventory("ActionCD") == 0)
	{
		GiveInventory("ActionCD", GetAmmoCapacity("MediumActionCharge"));
		Thing_Stop(0);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		GiveInventory("ShockSlamShield", 1);
		SpawnSpotFacingForced("ShockSlamSpawner", 0, 0);
		for(int i = 0; i < 16; i++)
		{
			Thing_Stop(0);
			delay(1);
		}
		ThrustThingZ(0, 128, 1, 1);
		SpawnProjectile(0, "ShockSlamMissile", 0, 0, 0, 0, 0);
		//Need this so people don't abuse the damage buff from Assassin's Tactics while not firing their weapon.
		//ACS_NamedExecuteAlways("CheckAssassinTactics", 0);
		TakeInventory("ShockSlamShield", 1);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
	}
	else
	{
		ACS_NamedExecuteAlways("Action1Fail", 0);
	}
}
//This is to make the Status bar display properly, i.e. the bar fills up to full when the ability is charged, and not have extra space
Script "SBARActionFixer" (void)
{
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		TakeInventory("FastActionCharge", GetAmmoCapacity("ActionCD"));
		TakeInventory("MediumActionCharge", GetAmmoCapacity("ActionCD"));
		GiveInventory("FastActionCharge", CheckInventory("ActionCD"));
		GiveInventory("MediumActionCharge", CheckInventory("ActionCD"));
		
		delay(1);
	}
}
Script "Action1Fail" (void)
{
	if(!(ClassifyActor(0) & ACTOR_BOT))
	{
		//displayHUDText("Action ability on cooldown.", 0.6, 2.0, 1301);
		LocalAmbientSound("General/Fail",96);
	}
}
