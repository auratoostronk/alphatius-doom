#library "alphlib"
#include "zcommon.acs"
#import "PLAYER.acs"
#import "ACTIONS.acs"
#import "TRAVEL.acs"
#import "HUD.acs"

#libdefine MAX_PLAYERS 64
#libdefine NUM_WEAPS 6
str WEAP_CLASSNAMES[NUM_WEAPS] = {"TeslaSMG", "ParticleSplitter", "PhotonCarbine", "C14", "SparkCannon", "RocketCannon"};
str WEAP_ENERGYNAMES[NUM_WEAPS] = {"SMGEnergy", "PumpSGEnergy", "CarbineEnergy", "C14Energy", "SparkEnergy", "RocketEnergy"};
str WEAP_COOLDOWNNAMES[NUM_WEAPS] = {"SMGAltCD", "PumpSGAltCD", "CarbineAltCD", "C14AltCD", "SparkAltCD", "RocketAltCD"};

function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

function bool isAirborne(void)
{
	return (GetActorZ(0) > GetActorFloorZ(0));
}

function void spawnHealFX(int amount)
{
	int latspread = 12.0;
	for(int i = 0; i < amount; i++)
	{
		SpawnForced("HealFX", GetActorX(0) + Random(-latspread, latspread), GetActorY(0) + Random(-latspread, latspread), GetActorZ(0) + 48.0, 0, 0);
	}
}
function void spawnThermiteFX(void)
{
	int latspread = 12.0;
	SpawnForced("ThermiteFX", GetActorX(0) + Random(-latspread, latspread), GetActorY(0) + Random(-latspread, latspread), GetActorZ(0) + 48.0, 0, 0);

}

//Helpful function for displaying text based on user's scaling settings.
function void displayHUDText(str text, int yMult, int holdTime, int id)
{
	int screenScale = GetCVAR("alph_textscale");
	int screenw = 640;
	int screenh = 400;
	int scaledScreenW = FixedDiv(screenw, screenScale);
	int scaledScreenH = FixedDiv(screenh, screenScale);
	int textX = ((scaledScreenW * 0.5) >> 16);
	int textY = ((scaledScreenH * yMult) >> 16);
	SetHUDSize(scaledScreenW, scaledScreenH, false);
	SetFont("SMALLFNT");
	HUDMessage(s:text;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP, id, CR_UNTRANSLATED, (textX << 16), (textY << 16), holdTime);
}

Script "RechargeTimers" ENTER
{
	while (true)
	{
		if(CheckInventory("IsDead") == 0)
		{	
			TakeInventory("SparkAltCD",1); 
			TakeInventory("C14AltCD",1); 
			TakeInventory("PumpSGAltCD",1); 
			TakeInventory("SMGAltCD",1); 
			TakeInventory("CarbineAltCD",1); 
			TakeInventory("RocketAltCD",1);
			TakeInventory("FlameAltCD",1);

			TakeInventory("WDriveCD",1);
			TakeInventory("HDriveCD",1);
			TakeInventory("JThrustCD",1);
			if(CheckInventory("TravelThrusterBoots"))
			{
				if(CheckInventory("ThrusterBootsCharge") < 2)
				{
					if (CheckInventory("TBootsCD") > 0)
					{
						TakeInventory("TBootsCD", 1);
					}
					else 
					{
						GiveInventory("ThrusterBootsCharge", 1);
						GiveInventory("TBootsCD", GetAmmoCapacity("TBootsCD"));
					}
				}				
			}
			int trav_sound_delay = 7;
			if(	CheckInventory("WDriveCD") == trav_sound_delay ||
				CheckInventory("HDriveCD") == trav_sound_delay ||
				CheckInventory("JThrustCD") == trav_sound_delay ||
				CheckInventory("TBootsCD") == trav_sound_delay)
			{
				LocalAmbientSound("General/TravelReady", 0.5);
			}
			
			GiveInventory("Action1Charge", 1);
			

			
			TakeInventory("EnergyRechargeCD",1);
			
			int movespeed = 1.0;
			if(CheckInventory("TravelHyperdrive") >= 1)
			{
				movespeed += 0.2;
			}
			if(CheckInventory("HyperdriveSpeed") >= 1)
			{
				movespeed += 0.4;
			}
			if(CheckInventory("AdrenalineBoostSpeedTics") >= 1)
			{
				movespeed += 0.3;
			}
			if(CheckInventory("SparkSpeedBoost") >= 1)
			{
				movespeed += 0.2;
			}
			if(CheckInventory("TeslaSpeedBoost") >= 1)
			{
				movespeed += 0.2;
			}
			if(CheckInventory("DisruptionGrenadeDebuff") >= 1)
			{
				movespeed -= 0.7;
			}
			SetActorProperty(0, APROP_SPEED, movespeed);
			TakeInventory("TicsGasSlow", 1);
			TakeInventory("DisruptionGrenadeDebuff", 1);
			TakeInventory("AdrenalineBoostSpeedTics", 1);
			TakeInventory("TeslaSpeedBoost", 1);
			
			if(!CheckInventory("EnergyRechargeCD"))
			{
					GiveInventory("SMGEnergy",  GetAmmoCapacity("SMGEnergy"));
					GiveInventory("SparkEnergy",  GetAmmoCapacity("SparkEnergy"));
					GiveInventory("C14Energy",  GetAmmoCapacity("C14Energy"));
					GiveInventory("CarbineEnergy",  GetAmmoCapacity("CarbineEnergy"));
					GiveInventory("PumpSGEnergy",  GetAmmoCapacity("PumpSGEnergy"));
					GiveInventory("RocketEnergy",  GetAmmoCapacity("RocketEnergy"));
					GiveInventory("FlameEnergy",  GetAmmoCapacity("FlameEnergy"));
					TakeInventory("NoLowEnergySound", 1);
			}
			if(CheckInventory("IsHealing") && GetActorProperty(0, APROP_HEALTH) < 100)
			{
				spawnHealFX(1);
			}
			TakeInventory("IsHealing", 1);
			TakeInventory("AltFireFailCD", 1);
			if(CheckInventory("ThermiteDebuff") > 0)
			{
				spawnThermiteFX();
			}
			TakeInventory("ThermiteDebuff", 1);
			if(CheckInventory("PowerRapidAlt") > 0)
			{
				TakeInventory("SparkAltCD",1); 
				TakeInventory("C14AltCD",1); 
				TakeInventory("PumpSGAltCD",1); 
				TakeInventory("SMGAltCD",1); 
				TakeInventory("CarbineAltCD",1); 
				TakeInventory("RocketAltCD",1);
				TakeInventory("FlameAltCD",1);
			}
		}
		delay(1);
	}
}
//Slowly charges weapons that aren't selected.
/*Script "EnergyRegen" ENTER
{
	while(true)
	{
		if(GetWeapon() != "SparkCannon")
			GiveInventory("SparkEnergy", 1);
		if(GetWeapon() != "PhotonCarbine")
			GiveInventory("CarbineEnergy", 1);
		if(GetWeapon() != "C14")
			GiveInventory("C14Energy", 1);
		if(GetWeapon() != "TeslaSMG")
			GiveInventory("SMGEnergy", 1);
		if(GetWeapon() != "ParticleSplitter")
			GiveInventory("PumpSGEnergy", 1);
		if(GetWeapon() != "RocketCannon")
			GiveInventory("RocketEnergy", 1);
		if(GetWeapon() != "Flamespitter")
			GiveInventory("FlameEnergy", 1);
		delay(2);
	}
}*/
//Every weapon should execute this script when fired.
Script "OnWeaponFired" (void) 
{
	GiveInventory("EnergyRechargeCD", 70);
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		if(GetWeapon() == WEAP_CLASSNAMES[i] && CheckInventory(WEAP_ENERGYNAMES[i]) <= 20 && CheckInventory("NoLowEnergySound") == 0)
		{
			LocalAmbientSound("General/LowEnergy", 96);
			GiveInventory("NoLowEnergySound", 1);
		}
	}
}
//Unused.
Script "AltFireTimer" (int arg1) 
{
	GiveInventory("CantAltFire",1);
	Delay(35*arg1);
	TakeInventory("CantAltFire",1);
}

//Checks for detonating mid-air rockets and energy grenades.
Script "CheckAltFirePressed" ENTER
{
	while(true)
	{
		if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK)
		{
			GiveInventory("AltFirePressed", 1);
			delay(1);
		}
		else if (CheckInventory("AltFirePressed") > 0)
		{
			TakeInventory("AltFirePressed", 1);
			GiveInventory("AltFireReleased", 1);
			delay(1);
			TakeInventory("AltFireReleased", 1);
		}
		else
		{
			delay(1);
		}
	}
}
Script "WeaponDeselect" (void)
{
	//TakeInventory("NoLowEnergySound", 1);
}

//For the Particle splitter's Decay mod. Flings decay pellets in multiple lateral directions when a player dies to a decay pellet.
Script "PlayerDeathByDecayPellet" (void)
{
	int initid = ActivatorTID();
	SetActivator(0, AAPTR_TARGET);
	for(int i = 0; i < 256; i += 8)
	{
		int projid = UniqueTID(1, 0);
		SpawnProjectile(0, "SGDecayPellet2", i, 144, 0, 0, projid);
		SetActorPosition(projid, GetActorX(initid), GetActorY(initid), GetActorZ(initid) + 32.0, false);
	}
}