#library "alphlib"
#include "zcommon.acs"
#import "PLAYER.acs"
#import "ACTIONS.acs"
#import "TRAVEL.acs"
#import "HUD.acs"
#import "WEAPON.acs"
#import "PASSIVES.acs"

#libdefine MAX_PLAYERS 64
#libdefine NUM_WEAPS 7
#libdefine NUM_TRAVELS 4

str WEAP_CLASSNAMES[NUM_WEAPS] = 	{"TeslaSMG", 	"ParticleSplitter", 	"PhotonCarbine", 	"C14", 			"SparkCannon", 		/*"RocketCannon",*/ 	"Flamespitter", 	"BeamRifle"};
str WEAP_ALTCLASSNAMES[NUM_WEAPS] = {"TeslaSMGAlt", "ParticleSplitterAlt", 	"PhotonCarbineAlt", "C14Alt", 		"SparkCannonAlt", 	/*"RocketCannonAlt",*/ 	"FlamespitterAlt", 	"BeamRifleAlt"};
str WEAP_ENERGYNAMES[NUM_WEAPS] = 	{"SMGEnergy", 	"PumpSGEnergy", 		"CarbineEnergy", 	"C14Energy", 	"SparkEnergy", 		/*"RocketEnergy",*/  	"FlameEnergy", 		"BeamEnergy"};
str WEAP_COOLDOWNNAMES[NUM_WEAPS] = {"SMGAltCD", 	"PumpSGAltCD", 			"CarbineAltCD",	 	"C14AltCD", 	"SparkAltCD", 		/*"RocketAltCD",*/ 		"FlameAltCD", 		"BeamAltCD"};
str WEAP_COLORS[NUM_WEAPS] = 		{"Yellow", 		"Purple", 				"Blue", 			"Green", 		"Red", 				/*"Gray",*/ 			"Orange", 			"LightBlue"};


function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

function bool isAirborne(void)
{
	return (GetActorZ(0) > GetActorFloorZ(0));
}
function void spawnThermiteFX(void)
{
	int latspread = 12.0;
	SpawnForced("ThermiteFX", GetActorX(0) + Random(-latspread, latspread), GetActorY(0) + Random(-latspread, latspread), GetActorZ(0) + 24.0, 0, 0);
}
//Helpful function for displaying text based on user's scaling settings.
function void displayHUDText(str text, int yLoc, int holdTime, int id)
{
	int screenScale = GetCVAR("alph_textscale");
	int screenw = 640;
	int screenh = 400;
	int scaledScreenW = FixedDiv(screenw, screenScale);
	int scaledScreenH = FixedDiv(screenh, screenScale);
	int textX = ((scaledScreenW * 0.5) >> 16);
	int textY = ((scaledScreenH * yLoc) >> 16);
	SetHUDSize(scaledScreenW, scaledScreenH, false);
	SetFont("SMALLFNT");
	HUDMessage(s:text;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP, id, CR_UNTRANSLATED, (textX << 16), (textY << 16), holdTime);
}
//No longer used. Having more than 50 armor broke weapon balance.
/*Script "ArmorDecay" ENTER
{
	while (true)
	{
		if(CheckInventory("Armor") > 50)
		{
			//Reduces armor value by one
			TakeInventory("Armor", 1);
		}
		delay(30);
	}
}*/
Script "CheckPowerupCVAR" (void)
{
	SetResultValue(GetCVAR("alph_nopowerups"));
}

//Holds the script for many timers that occur each tic.
Script "RechargeTimers" ENTER
{
	while (true)
	{
		if(ClassifyActor(ActivatorTID()) & ACTOR_ALIVE)
		{	
			int cooldownspeed = 1;
			if(CheckInventory("PowerChronalDrive") > 0)
			{
				cooldownspeed = 4;
			}
			for(int i = 0; i < NUM_WEAPS; i++)
			{
				//Reduces alt-fire cooldown
				TakeInventory(WEAP_COOLDOWNNAMES[i], cooldownspeed);
				//If the weapon's cooldown is about to be ready (4 tics) and its the correct weapon, play a sound.
				if(CheckInventory(WEAP_COOLDOWNNAMES[i]) == 4 && GetWeapon() == WEAP_CLASSNAMES[i])
				{
					LocalAmbientSound("General/AltReady", 0.5);
				}
			}
			//Reduces global alt-fire cooldown (alt-fire cooldown shared between weapons)
			TakeInventory("AltFireDeviceCD", 1);
			//Cooldown between "Alt Fire Failed" messages
			TakeInventory("AltFireFailCD", 1);
			
			int ENERGY_SOUND_DELAY = 7;
			//Refills energy when the player has not fired a weapon in a while.
			if(CheckInventory("EnergyRechargeCD") == ENERGY_SOUND_DELAY)
			{
				for(int j = 0; j < NUM_WEAPS; j++)
				{
					GiveInventory(WEAP_ENERGYNAMES[j], GetAmmoCapacity(WEAP_ENERGYNAMES[j]));
				}
				//And plays this sound.
				LocalAmbientSound("General/WeaponReady", 0.5);
			}
			//Energy Recharge Cooldown: How many tics before your energy begins replenishing.
			TakeInventory("EnergyRechargeCD",1);

			//Reduce travel ability cooldowns.
			TakeInventory("WDriveCD", cooldownspeed);
			TakeInventory("HDriveCD", cooldownspeed);
			TakeInventory("JThrustCD", cooldownspeed);
			//TakeInventory("SOrbCD",1);
			//Thruster boots uses charges, so it uses slightly different code.
			if(CheckInventory("TravelThrusterBoots"))
			{
				//If not max charges...
				if(CheckInventory("ThrusterBootsCharge") < 2)
				{
					//And cooldown meter isn't depleted...
					if (CheckInventory("TBootsCD") > 0)
					{
						//Reduce cooldown meter.
						TakeInventory("TBootsCD", cooldownspeed);
					}
					//If the meter is empty, give a charge and put the meter on cooldown again.
					else 
					{
						GiveInventory("ThrusterBootsCharge", cooldownspeed);
						GiveInventory("TBootsCD", GetAmmoCapacity("TBootsCD"));
					}
				}				
			}
			//This is how early the TravelReady sound plays in tics before the travel ability is ready.
			int TRAV_SOUND_DELAY = 7;
			if(	CheckInventory("WDriveCD") == TRAV_SOUND_DELAY ||
				CheckInventory("HDriveCD") == TRAV_SOUND_DELAY ||
				CheckInventory("JThrustCD") == TRAV_SOUND_DELAY ||
				CheckInventory("SOrbCD") == TRAV_SOUND_DELAY ||
				CheckInventory("TBootsCD") == TRAV_SOUND_DELAY)
			{
				//LocalAmbientSound("General/TravelReady", 0.5);
			}
			
			//For the flamespitter. If the player recently was hit by the alt-fire, spawn napalm effects on them.
			if(CheckInventory("ThermiteDebuff") > 0)
			{
				spawnThermiteFX();
			}
			//Then remove a tic of the debuff.
			TakeInventory("ThermiteDebuff", 1);
			
			//If not LMS or TeamLMS
			if(StrICmp(GetCurrentGameMode(), "Last Man Standing") != 0 && StrICmp(GetCurrentGameMode(), "Team Last Man Standing") != 0)
			{
				//Action cooldown recharges
				TakeInventory("ActionCD", cooldownspeed);
			}

			//Movespeed increases
			//We use SetActorProperty to allow movement speed boosts to stack (PowerSpeed powers cannot).
			int movespeed = 1.0;
			//Speed boost from firing Tesla SMG
			if(CheckInventory("TeslaSpeedBoost") >= 1)
			{
				movespeed += TESLA_SHOOTSPD;
			}
			//Speed boost from Adrenaline Rush
			if(CheckInventory("PowerAdrenaline") >= 1)
			{
				movespeed += ARUSH_KILLSPD;
			}
			//Speed boost from having your travel ability be Hyperdrive
			if(CheckInventory("TravelHyperdrive") >= 1)
			{
				movespeed += HYPERD_PASSIVESPD;
			}
			//Speed boost from activating Hyperdrive
			if(CheckInventory("HyperdriveSpeed") >= 1)
			{
				movespeed += HYPERD_ACTIVESPD;
			}
			//If the players' movespeed is increased, give the player a speed trail.
			if(movespeed > 1.0)
			{
				GiveInventory("SpeedBoostTrail", 1);
			}
			SetActorProperty(0, APROP_SPEED, movespeed);
			//Telsa SMG speed boost is not permanent (only lasts about 5 tics)
			TakeInventory("TeslaSpeedBoost", 1);
			

			//Spawns smoke when the player is using Thruster Boots.
			if(CheckInventory("ThrusterBootsSmokeTics") >= 1)
			{
				SpawnSpotFacingForced("ThrusterBootsSmokeSpawner", 0, 0);
			}
			TakeInventory("ThrusterBootsSmokeTics", 1);
			
			//Quiet Crouching
			/*if(GetPlayerInput(0, INPUT_BUTTONS) & BT_CROUCH)
			{
				SetActorProperty(0, APROP_FOOTSTEPVOLUME, 0.0);
			}
			else
			{
				SetActorProperty(0, APROP_FOOTSTEPVOLUME, 1.0);
			}*/
		}
		delay(1);
	}
}