#library "alphlib"
#include "zcommon.acs"
#import "PLAYER.acs"
#import "ACTIONS.acs"
#import "TRAVEL.acs"
#import "HUD.acs"
#import "PASSIVES.acs"

#libdefine MAX_PLAYERS 64
#libdefine NUM_WEAPS 7
#libdefine NUM_TRAVELS 4
str WEAP_CLASSNAMES[NUM_WEAPS] = 	{"TeslaSMG", 	"ParticleSplitter", 	"PhotonCarbine", 	"C14", 			"SparkCannon", 		/*"RocketCannon",*/ 	"Flamespitter", 	"BeamRifle"};
str WEAP_ALTCLASSNAMES[NUM_WEAPS] = {"TeslaSMGAlt", "ParticleSplitterAlt", 	"PhotonCarbineAlt", "C14Alt", 		"SparkCannonAlt", 	/*"RocketCannonAlt",*/ 	"FlamespitterAlt", 	"BeamRifleAlt"};
str WEAP_ENERGYNAMES[NUM_WEAPS] = 	{"SMGEnergy", 	"PumpSGEnergy", 		"CarbineEnergy", 	"C14Energy", 	"SparkEnergy", 		/*"RocketEnergy",*/  	"FlameEnergy", 		"BeamEnergy"};
str WEAP_COOLDOWNNAMES[NUM_WEAPS] = {"SMGAltCD", 	"PumpSGAltCD", 			"CarbineAltCD",	 	"C14AltCD", 	"SparkAltCD", 		/*"RocketAltCD",*/ 		"FlameAltCD", 		"BeamAltCD"};
str WEAP_COLORS[NUM_WEAPS] = 		{"Yellow", 		"Purple", 				"Blue", 			"Green", 		"Red", 				/*"Gray",*/ 			"Orange", 			"LightBlue"};

function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

function bool isAirborne(void)
{
	return (GetActorZ(0) > GetActorFloorZ(0));
}

function void spawnThermiteFX(void)
{
	int latspread = 12.0;
	SpawnForced("ThermiteFX", GetActorX(0) + Random(-latspread, latspread), GetActorY(0) + Random(-latspread, latspread), GetActorZ(0) + 32.0, 0, 0);

}

//Helpful function for displaying text based on user's scaling settings.
function void displayHUDText(str text, int yMult, int holdTime, int id)
{
	int screenScale = GetCVAR("alph_textscale");
	int screenw = 640;
	int screenh = 400;
	int scaledScreenW = FixedDiv(screenw, screenScale);
	int scaledScreenH = FixedDiv(screenh, screenScale);
	int textX = ((scaledScreenW * 0.5) >> 16);
	int textY = ((scaledScreenH * yMult) >> 16);
	SetHUDSize(scaledScreenW, scaledScreenH, false);
	SetFont("SMALLFNT");
	HUDMessage(s:text;HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP, id, CR_UNTRANSLATED, (textX << 16), (textY << 16), holdTime);
}

Script "RechargeTimers" ENTER
{
	while (true)
	{
		if(ClassifyActor(ActivatorTID()) & ACTOR_ALIVE)
		{	
			for(int i = 0; i < NUM_WEAPS; i++)
			{
				TakeInventory(WEAP_COOLDOWNNAMES[i], 1);
				if(CheckInventory(WEAP_COOLDOWNNAMES[i]) == 4 && GetWeapon() == WEAP_CLASSNAMES[i])
				{
					LocalAmbientSound("General/AltReady", 0.5);
				}
			}

			TakeInventory("WDriveCD",1);
			TakeInventory("HDriveCD",1);
			TakeInventory("JThrustCD",1);
			if(CheckInventory("TravelThrusterBoots"))
			{
				if(CheckInventory("ThrusterBootsCharge") < 2)
				{
					if (CheckInventory("TBootsCD") > 0)
					{
						TakeInventory("TBootsCD", 1);
					}
					else 
					{
						GiveInventory("ThrusterBootsCharge", 1);
						GiveInventory("TBootsCD", GetAmmoCapacity("TBootsCD"));
					}
				}				
			}
			int trav_sound_delay = 7;
			if(	CheckInventory("WDriveCD") == trav_sound_delay ||
				CheckInventory("HDriveCD") == trav_sound_delay ||
				CheckInventory("JThrustCD") == trav_sound_delay ||
				CheckInventory("TBootsCD") == trav_sound_delay)
			{
				LocalAmbientSound("General/TravelReady", 0.5);
			}
			
			if(CheckInventory("ThermiteDebuff") > 0)
			{
				spawnThermiteFX();
			}
			TakeInventory("ThermiteDebuff", 1);
			
			GiveInventory("Action1Charge", 1);
			TakeInventory("EnergyRechargeCD",1);
			TakeInventory("AltFireFailCD", 1);
			
			int movespeed = 1.0;
			if(CheckInventory("TeslaSpeedBoost") >= 1)
			{
				movespeed += 0.2;
			}
			if(CheckInventory("HyperdriveSpeed") >= 1)
			{
				movespeed += 0.5;
			}
			SetActorProperty(0, APROP_SPEED, movespeed);
			
			TakeInventory("TeslaSpeedBoost", 1);
			/*if(!CheckInventory("EnergyRechargeCD"))
			{
				for(int j = 0; j < NUM_WEAPS; j++)
				{
					GiveInventory(WEAP_ENERGYNAMES[j], GetAmmoCapacity(WEAP_ENERGYNAMES[j]));
				}
				TakeInventory("NoLowEnergySound", 1);
			}*/
			int energy_sound_delay = 1;
			if(CheckInventory("EnergyRechargeCD") == energy_sound_delay)
			{
				for(int j = 0; j < NUM_WEAPS; j++)
				{
					GiveInventory(WEAP_ENERGYNAMES[j], GetAmmoCapacity(WEAP_ENERGYNAMES[j]));
				}
				TakeInventory("NoLowEnergySound", 1);
				LocalAmbientSound("General/WeaponReady", 0.5);
			}
			
		}
		delay(1);
	}
}
//Every weapon should execute this script when fired.
Script "OnWeaponFired" (void) 
{
	GiveInventory("EnergyRechargeCD", 105);
	for(int i = 0; i < NUM_WEAPS; i++)
	{
		if(GetWeapon() == WEAP_CLASSNAMES[i] && CheckInventory(WEAP_ENERGYNAMES[i]) <= 20 && CheckInventory("NoLowEnergySound") == 0)
		{
			LocalAmbientSound("General/LowEnergy", 96);
			GiveInventory("NoLowEnergySound", 1);
		}
	}
}

//Checks for detonating mid-air rockets and energy grenades.
Script "CheckAltFirePressed" ENTER
{
	while(true)
	{
		if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ALTATTACK)
		{
			GiveInventory("AltFirePressed", 1);
			delay(1);
		}
		else if (CheckInventory("AltFirePressed") > 0)
		{
			TakeInventory("AltFirePressed", 1);
			GiveInventory("AltFireReleased", 1);
			delay(1);
			TakeInventory("AltFireReleased", 1);
		}
		else
		{
			delay(1);
		}
	}
}
/*
//For the Particle splitter's Decay mod. Flings decay pellets in multiple lateral directions when a player dies to a decay pellet.
Script "PlayerDeathByDecayPellet" (void)
{
	int initid = ActivatorTID();
	SetActivator(0, AAPTR_TARGET);
	for(int i = 0; i < 256; i += 8)
	{
		int projid = UniqueTID(1, 0);
		SpawnProjectile(0, "SGDecayPellet2", i, 144, 0, 0, projid);
		SetActorPosition(projid, GetActorX(initid), GetActorY(initid), GetActorZ(initid) + 32.0, false);
	}
}*/